[
	{
		"id": 1662293429190656,
		"method": "GET",
		"restUrl": "",
		"operationType": "queries",
		"isPublic": true,
		"remark": "",
		"illegal": false,
		"liveQuery": false,
		"title": "/Teacher/GetOneTeacher",
		"content": "query GetOneTeacher($id: String!) {\n  data: freetalk_findFirstTeacher(where: {id: {equals: $id}}) {\n    id\n    name\n    gender\n    age\n    avatar\n    feature\n    createdAt\n    updatedAt\n    requiredSceneCategoryIds\n    prompts: _join @transform(get: \"freetalk_findManyPromptText\") {\n      freetalk_findManyPromptText(\n        where: {usage: {equals: Teacher}, usageId: {equals: $id}}\n      ) {\n        content\n        name\n      }\n    }\n  }\n} ",
		"enabled": true,
		"createTime": "2023-04-23 03:32:09Z",
		"updateTime": "2023-06-14 10:30:59Z",
		"deleteTime": "",
		"roleType": "",
		"roles": ""
	},
	{
		"content": "query GetManyTeacher {\n  data: freetalk_findManyTeacher(where: {displayUsage: {equals: Spoken}}) {\n    id @export(as: \"teacherId\")\n    name\n    gender\n    age\n    avatar\n    feature\n    createdAt\n    updatedAt\n  }\n}",
		"createTime": "2023-04-23 03:32:09Z",
		"deleteTime": "",
		"enabled": true,
		"id": 1662293433843712,
		"illegal": false,
		"isPublic": true,
		"liveQuery": false,
		"method": "GET",
		"operationType": "queries",
		"remark": "",
		"restUrl": "",
		"roleType": "",
		"roles": "",
		"title": "/Teacher/GetChatTeachers",
		"updateTime": "2023-06-14 10:24:01Z"
	},
	{
		"content": "query GetManyLearningLanguage {\n  data: freetalk_findManyLearningLanguage(orderBy: {sort: desc}) {\n    id\n    name\n    azure\n  }\n}",
		"createTime": "2023-04-23 03:43:49Z",
		"deleteTime": "",
		"enabled": true,
		"id": 1662339289579520,
		"illegal": false,
		"isPublic": true,
		"liveQuery": false,
		"method": "GET",
		"operationType": "queries",
		"remark": "",
		"restUrl": "",
		"roleType": "",
		"roles": "",
		"title": "/Language/GetLearningLanguages",
		"updateTime": "2023-06-14 10:22:19Z"
	},
	{
		"content": "mutation CreateOneChat($updatedAt: DateTime! @injectCurrentDateTime(format: ISO8601), $sceneId: String!, $teacherId: String!, $userId: String! @fromClaim(name: USERID)) {\n  data: freetalk_createOneChat(\n    data: {updatedAt: $updatedAt, Scene: {connect: {id: $sceneId}}, Teacher: {connect: {id: $teacherId}}, User: {connect: {id: $userId}}}\n  ) {\n    id\n  }\n}",
		"createTime": "2023-04-23 03:44:39Z",
		"deleteTime": "",
		"enabled": true,
		"id": 1662342612582400,
		"illegal": false,
		"isPublic": true,
		"liveQuery": false,
		"method": "POST",
		"operationType": "mutations",
		"remark": "",
		"restUrl": "",
		"roleType": "",
		"roles": "",
		"title": "/Chat/CreateChat",
		"updateTime": "2023-05-09 08:43:29Z"
	},
	{
		"content": "mutation CreateOneAccount($updatedAt: DateTime! @injectCurrentDateTime(format: ISO8601), $userId: String!) {\n  data: freetalk_createOneAccount(\n    data: {costDuration: 0, leftDuration: 0, updatedAt: $updatedAt, User: {connect: {id: $userId}}}\n  ) {\n    id\n  }\n}",
		"createTime": "2023-04-23 03:46:17Z",
		"deleteTime": "",
		"enabled": true,
		"id": 1662348983664640,
		"illegal": false,
		"isPublic": true,
		"liveQuery": false,
		"method": "POST",
		"operationType": "mutations",
		"remark": "",
		"restUrl": "",
		"roleType": "",
		"roles": "",
		"title": "/Account/CreateOneAccount",
		"updateTime": "2023-05-09 07:43:06Z"
	},
	{
		"content": "mutation SetMembership($id: String!, $membershipId: String!, $membershipEndTime: DateTime!, $updatedAt: DateTime! @injectCurrentDateTime(format: ISO8601)) {\n  data: freetalk_updateOneAccount(\n    data: {membershipEndTime: {set: $membershipEndTime}, updatedAt: {set: $updatedAt}, Membership: {connect: {id: $membershipId}}}\n    where: {id: $id}\n  ) {\n    id\n    costDuration\n    leftDuration\n    membershipEndTime\n    createdAt\n    updatedAt\n    deletedAt\n    User {\n      avatar\n      id\n      nickname\n    }\n  }\n}",
		"createTime": "2023-04-23 03:46:17Z",
		"deleteTime": "",
		"enabled": true,
		"id": 1662348989956096,
		"illegal": false,
		"isPublic": true,
		"liveQuery": false,
		"method": "POST",
		"operationType": "mutations",
		"remark": "",
		"restUrl": "",
		"roleType": "",
		"roles": "",
		"title": "/Account/SetMembership",
		"updateTime": "2023-06-08 09:17:24Z"
	},
	{
		"content": "query GetOneAccount($userId: String! @fromClaim(name: USERID)) {\n  data: freetalk_findFirstAccount(\n    where: {User: {is: {id: {equals: $userId}, enabled: {equals: true}}}}\n  ) {\n    id\n    costDuration\n    leftDuration\n    membershipEndTime\n    createdAt\n    updatedAt\n    deletedAt\n    User {\n      avatar\n      id\n      nickname\n    }\n  }\n} ",
		"createTime": "2023-04-23 03:46:17Z",
		"deleteTime": "",
		"enabled": true,
		"id": 1662348989956096,
		"illegal": false,
		"isPublic": true,
		"liveQuery": false,
		"method": "POST",
		"operationType": "mutations",
		"remark": "",
		"restUrl": "",
		"roleType": "",
		"roles": "",
		"title": "/Account/SetMembership",
		"updateTime": "2023-06-08 09:17:24Z"
	},
	{
		"content": "query GetOneAccount($userId: String! @fromClaim(name: USERID)) {\n  data: freetalk_findFirstAccount(\n    where: {User: {is: {id: {equals: $userId}, enabled: {equals: true}}}}\n  ) {\n    id\n    costDuration\n    leftDuration\n    membershipEndTime\n    createdAt\n    updatedAt\n    deletedAt\n    User {\n      avatar\n      id\n      nickname\n    }\n    Membership {\n      lifespan\n      price\n      id\n    }\n  }\n}",
		"createTime": "2023-04-23 03:46:17Z",
		"deleteTime": "",
		"enabled": true,
		"id": 1662348994871296,
		"illegal": false,
		"isPublic": true,
		"liveQuery": false,
		"method": "GET",
		"operationType": "queries",
		"remark": "",
		"restUrl": "",
		"roleType": "",
		"roles": "",
		"title": "/Account/GetOneAccount",
		"updateTime": "2023-06-09 06:25:52Z"
	},
	{
		"content": "mutation CreateOneChatMessage($content: String, $nativeContent: String, $audioUrl: String, $audioDuration: Float, $createWith: freetalk_ChatCreateWith! = Content, $costDuration: Float = 0, $updatedAt: DateTime! @injectCurrentDateTime(format: ISO8601), $role: String!, $chatId: String!, $outTimeDuration: Float, $isSuper: Boolean) {\n  data: freetalk_createOneChatMessage(\n    data: {content: $content, audioUrl: $audioUrl, costDuration: $costDuration, updatedAt: $updatedAt, Chat: {connect: {id: $chatId}}, role: $role, nativeContent: $nativeContent, createWith: $createWith, audioDuration: $audioDuration, outTimeDuration: $outTimeDuration, isSuper: $isSuper}\n  ) {\n    costDuration\n    userId: Chat @transform(get: \"User.id\") {\n      User {\n        id\n      }\n    }\n    id\n    outTimeDuration\n  }\n}",
		"createTime": "2023-04-23 03:46:49Z",
		"deleteTime": "",
		"enabled": true,
		"id": 1662351095627776,
		"illegal": false,
		"isPublic": true,
		"liveQuery": false,
		"method": "POST",
		"operationType": "mutations",
		"remark": "",
		"restUrl": "",
		"roleType": "",
		"roles": "",
		"title": "/Chat/Message/CreateOneChatMessage",
		"updateTime": "2023-06-09 03:18:07Z"
	},
	{
		"content": "query GetDictList($take: Int = 10, $skip: Int = 0, $orderBy: [freetalk_DictOrderByWithRelationInput], $query: freetalk_DictWhereInput) {\n  data: freetalk_findManyDict(\n    skip: $skip\n    take: $take\n  orderBy: $orderBy\n    where: {AND: $query}) {\n    \n    id\n    code\n    name\n    description\n    type\n    createdAt\n    updatedAt\n  }\n  total: freetalk_aggregateDict(where: {AND: $query}) @transform(get: \"_count.id\") {\n    _count {\n      id\n    }\n  }\n}",
		"createTime": "2023-04-23 03:47:07Z",
		"deleteTime": "",
		"enabled": false,
		"id": 1662352259743744,
		"illegal": false,
		"isPublic": true,
		"liveQuery": false,
		"method": "GET",
		"operationType": "queries",
		"remark": "",
		"restUrl": "",
		"roleType": "",
		"roles": "",
		"title": "/Dict/GetDictList",
		"updateTime": ""
	},
	{
		"content": "mutation CreateOneDurationHistory($accountId: String! @fromClaim(name: USERID), $value: Float!, $updatedAt: DateTime! @injectCurrentDateTime(format: ISO8601), $paymentId: String!) {\n  data: freetalk_createOneDurationHisotory(\n    data: {Account: {connect: {id: $accountId}}, updatedAt: $updatedAt, value: $value, usage: Payment, usageId: $paymentId}\n  ) {\n    id\n  }\n}",
		"createTime": "2023-04-23 03:47:47Z",
		"deleteTime": "",
		"enabled": true,
		"id": 1662354926338048,
		"illegal": false,
		"isPublic": true,
		"liveQuery": false,
		"method": "POST",
		"operationType": "mutations",
		"remark": "",
		"restUrl": "",
		"roleType": "",
		"roles": "",
		"title": "/Duration/CreatePaymentDurationHistory",
		"updateTime": "2023-06-02 13:51:01Z"
	},
	{
		"content": "query GetManyDurationPackage($packageId: String @internal) {\n  data: freetalk_findManyDurationPackage {\n    id @export(as: \"packageId\")\n    name\n    price\n    value\n    discount: _join @transform(get: \"freetalk_findFirstDiscount\") {\n      freetalk_findFirstDiscount(where: {usageId: {equals: $packageId}, usage: {equals: DurationPackage}}) {\n        description\n        name\n        value\n        expireAt\n      }\n    }\n  }\n}",
		"createTime": "2023-04-23 03:47:48Z",
		"deleteTime": "",
		"enabled": true,
		"id": 1662354941345792,
		"illegal": false,
		"isPublic": true,
		"liveQuery": false,
		"method": "GET",
		"operationType": "queries",
		"remark": "",
		"restUrl": "",
		"roleType": "",
		"roles": "",
		"title": "/Duration/GetManyDurationPackage",
		"updateTime": "2023-06-02 02:34:32Z"
	},
	{
		"content": "query GetOnePromptText($usageId: String!, $usage: freetalk_PromptTextUsage = Helper) {\n  data: freetalk_findFirstPromptText(\n    where: {usage: {equals: $usage}, usageId: {equals: $usageId}}\n  ) {\n    content\n    id\n    name\n  }\n}",
		"createTime": "2023-04-23 03:48:30Z",
		"deleteTime": "",
		"enabled": true,
		"id": 1662357748121600,
		"illegal": false,
		"isPublic": true,
		"liveQuery": false,
		"method": "GET",
		"operationType": "queries",
		"remark": "",
		"restUrl": "",
		"roleType": "",
		"roles": "",
		"title": "/PromptText/GetOnePromptText",
		"updateTime": "2023-05-30 11:38:24Z"
	},
	{
		"content": "mutation CreateOne($id: String!, $avatar: String!, $phone: String!, $nickname: String!, $speedOfSpeech: String!, $updatedAt: DateTime! @injectCurrentDateTime(format: ISO8601), $difficulty: String!, $learningPurpose: String, $profession: String, $learningLanguageId: String, $age: String) @internalOperation {\n  data: freetalk_createOneUser(\n    data: {id: $id, avatar: $avatar, phone: $phone, nickname: $nickname, age: $age, difficulty: $difficulty, speedOfSpeech: $speedOfSpeech, updatedAt: $updatedAt, enabled: true, learningPurpose: $learningPurpose, profession: $profession, LearningLanguage: {connect: {id: $learningLanguageId}}}\n  ) {\n    id\n    phone\n    nickname\n    nativeLanguage\n    profession\n    learningPurpose\n    difficulty\n    speedOfSpeech\n    enabled\n    updatedAt\n    deletedAt\n  }\n} ",
		"createTime": "2023-04-23 03:48:55Z",
		"deleteTime": "",
		"enabled": true,
		"id": 1662359340449792,
		"illegal": false,
		"isPublic": false,
		"liveQuery": false,
		"method": "POST",
		"operationType": "mutations",
		"remark": "",
		"restUrl": "",
		"roleType": "",
		"roles": "",
		"title": "/User/CreateOneUser",
		"updateTime": "2023-05-30 08:09:56Z"
	},
	{
		"content": "mutation DeleteOneUser($id: String!) @internalOperation {\n  data: freetalk_deleteOneUser(where: {id: $id}) {\n    id\n  }\n}",
		"createTime": "2023-04-23 03:48:55Z",
		"deleteTime": "",
		"enabled": true,
		"id": 1662359344054272,
		"illegal": false,
		"isPublic": false,
		"liveQuery": false,
		"method": "POST",
		"operationType": "mutations",
		"remark": "",
		"restUrl": "",
		"roleType": "",
		"roles": "",
		"title": "/User/DeleteOneUser",
		"updateTime": "2023-04-25 09:11:48Z"
	},
	{
		"content": "mutation MyQuery($userId: String! @fromClaim(name: USERID), $languageId: String!) {\n  data: freetalk_updateOneUser(\n    data: {LearningLanguage: {connect: {id: $languageId}}}\n    where: {id: $userId}\n  ) {\n    age\n    id\n  }\n} ",
		"createTime": "2023-04-23 11:59:34Z",
		"deleteTime": "",
		"enabled": true,
		"id": 1664288695189504,
		"illegal": false,
		"isPublic": true,
		"liveQuery": false,
		"method": "POST",
		"operationType": "mutations",
		"remark": "",
		"restUrl": "",
		"roleType": "",
		"roles": "",
		"title": "/UserSetting/SetTargetLanguage",
		"updateTime": "2023-04-28 07:41:26Z"
	},
	{
		"content": "mutation MyQuery($code: String!, $phone: String!, $age: String = \"\", $languageDifficulty: String, $learningLanguageId: String, $learningPurpose: String, $nickname: String, $profession: String) {\n  data: authing_loginOrRegister(\n    phone: $phone\n    code: $code\n    age: $age\n    languageDifficulty: $languageDifficulty\n    learningLanguageId: $learningLanguageId\n    learningPurpose: $learningPurpose\n    nickname: $nickname\n    profession: $profession\n  ) {\n    access_token\n    expire_in\n    id_token\n    refresh_token\n    token_type\n  }\n}",
		"createTime": "2023-04-24 01:21:58Z",
		"deleteTime": "",
		"enabled": true,
		"id": 1667443828195328,
		"illegal": false,
		"isPublic": true,
		"liveQuery": false,
		"method": "POST",
		"operationType": "mutations",
		"remark": "",
		"restUrl": "",
		"roleType": "",
		"roles": "",
		"title": "/Auth/LoginOrRegister",
		"updateTime": "2023-05-10 07:03:10Z"
	},
	{
		"content": "query MyQuery {\n  data: freetalk_findFirstTeacher(where: {displayUsage: {equals: Random}}) {\n    avatar\n    feature\n    gender\n    id\n    name\n  }\n}",
		"createTime": "2023-04-24 10:11:04Z",
		"deleteTime": "",
		"enabled": true,
		"id": 1669524354301952,
		"illegal": false,
		"isPublic": true,
		"liveQuery": false,
		"method": "GET",
		"operationType": "queries",
		"remark": "",
		"restUrl": "",
		"roleType": "",
		"roles": "",
		"title": "/Teacher/GetRandomChatTeacher",
		"updateTime": "2023-04-24 10:11:55Z"
	},
	{
		"content": "query MyQuery($equals: String! @fromClaim(name: USERID)) {\n  data: freetalk_findFirstAccount(where: {id: {equals: $equals}}) {\n    costDuration\n  }\n}",
		"createTime": "2023-04-25 03:36:33Z",
		"deleteTime": "",
		"enabled": true,
		"id": 1673635352608768,
		"illegal": false,
		"isPublic": true,
		"liveQuery": false,
		"method": "GET",
		"operationType": "queries",
		"remark": "",
		"restUrl": "",
		"roleType": "",
		"roles": "",
		"title": "/User/GetTotalUsage",
		"updateTime": "2023-04-25 03:39:50Z"
	},
	{
		"content": "query MyQuery($userId: String! @fromClaim(name: USERID)) {\n  data: freetalk_findFirstUser(\n    where: {id: {equals: $userId}, enabled: {equals: true}}\n  ) {\n    id\n    age\n    avatar\n    clientDisplayLanguages\n    difficulty\n    learningPurpose\n    nickname\n    phone\n    profession\n    speedOfSpeech\n    nativeLanguage\n    learningLanguage: LearningLanguage {\n      name\n      azure\n    }\n    account: Account {\n      membershipEndTime\n      membershipName: Membership @transform(get: \"name\") {\n        name\n      }\n      leftDuration\n    }\n  }\n}",
		"createTime": "2023-04-25 06:58:15Z",
		"deleteTime": "",
		"enabled": true,
		"id": 1674428476817408,
		"illegal": false,
		"isPublic": true,
		"liveQuery": false,
		"method": "GET",
		"operationType": "queries",
		"remark": "",
		"restUrl": "",
		"roleType": "",
		"roles": "",
		"title": "/UserSetting/GetOneSetting",
		"updateTime": "2023-06-08 09:11:32Z"
	},
	{
		"content": "query MyQuery($phone: String!) @internalOperation {\n  data: freetalk_findFirstUser(where: {phone: {equals: $phone}}) {\n    id\n    accountId: Account @transform(get: \"id\") {\n      id\n    }\n  }\n}",
		"createTime": "2023-04-25 07:17:51Z",
		"deleteTime": "",
		"enabled": true,
		"id": 1674505517858816,
		"illegal": false,
		"isPublic": false,
		"liveQuery": false,
		"method": "GET",
		"operationType": "queries",
		"remark": "",
		"restUrl": "",
		"roleType": "",
		"roles": "",
		"title": "/User/IsUserExisted",
		"updateTime": "2023-05-26 12:22:39Z"
	},
	{
		"content": "query MyQuery($code: String!) {\n  data: freetalk_findManyDictItem(\n    where: {Dict: {is: {code: {equals: $code}}}, enabled: {equals: true}}\n    orderBy: [{sort: desc}, {updatedAt: desc}]\n  ) {\n    id\n    title\n    value\n    description\n  }\n}",
		"createTime": "2023-04-25 07:54:17Z",
		"deleteTime": "",
		"enabled": true,
		"id": 1674648803409920,
		"illegal": false,
		"isPublic": true,
		"liveQuery": false,
		"method": "GET",
		"operationType": "queries",
		"remark": "",
		"restUrl": "",
		"roleType": "",
		"roles": "",
		"title": "/Dict/GetDictItems",
		"updateTime": "2023-04-25 08:40:39Z"
	},
	{
		"content": "query GetChatMessageList($take: Int = 10, $skip: Int = 0, $chatId: String!) {\n  data: freetalk_findManyChatMessage(\n    skip: $skip\n    take: $take\n    where: {chatId: {equals: $chatId}}\n    orderBy: {createdAt: desc}\n  ) {\n    id\n    createdAt\n    updatedAt\n    audioUrl\n    chatId\n    content\n    costDuration\n    errorRecovery\n    role\n    nativeContent\n    audioDuration\n    createWith\n  }\n  total: freetalk_aggregateChatMessage(where: {chatId: {equals: $chatId}}) @transform(get: \"_count.id\") {\n    _count {\n      id\n    }\n  }\n}",
		"createTime": "2023-04-25 07:48:29Z",
		"deleteTime": "",
		"enabled": true,
		"id": 1674625979645952,
		"illegal": false,
		"isPublic": true,
		"liveQuery": false,
		"method": "GET",
		"operationType": "queries",
		"remark": "",
		"restUrl": "",
		"roleType": "",
		"roles": "",
		"title": "/Chat/Message/GetChatMessageList",
		"updateTime": "2023-05-31 09:54:29Z"
	},
	{
		"content": "query MyQuery($code: String!) {\n  data: freetalk_findFirstDictItem(\n    where: {enabled: {equals: true}, Dict: {is: {code: {equals: $code}}}, isDefault: {equals: true}}\n  ) {\n    id\n    title\n    value\n  }\n}",
		"createTime": "2023-04-25 08:44:01Z",
		"deleteTime": "",
		"enabled": true,
		"id": 1674844341338112,
		"illegal": false,
		"isPublic": true,
		"liveQuery": false,
		"method": "GET",
		"operationType": "queries",
		"remark": "",
		"restUrl": "",
		"roleType": "",
		"roles": "",
		"title": "/Dict/GetDictDefaultValue",
		"updateTime": "2023-04-25 09:29:37Z"
	},
	{
		"content": "subscription GptSubscription($chatCtxLimit: Int = 10, $chatId: String, $usage: String!, $message: String, $helper: String, $userId: String! @fromClaim(name: USERID), $helperArgs: String) {\n  data: gpt_chat_subscription(\n    chatCtxLimit: $chatCtxLimit\n    chatId: $chatId\n    message: $message\n    helper: $helper\n    usage: $usage\n    userId: $userId\n    helperArgs: $helperArgs\n  )\n}",
		"createTime": "2023-04-23 10:29:52Z",
		"deleteTime": "",
		"enabled": true,
		"id": 1663935929647104,
		"illegal": false,
		"isPublic": true,
		"liveQuery": true,
		"method": "GET",
		"operationType": "subscriptions",
		"remark": "",
		"restUrl": "",
		"roleType": "",
		"roles": "",
		"title": "/GPT/ChatSubscription",
		"updateTime": "2023-06-08 06:12:59Z"
	},
	{
		"content": "query GetOneChat($id: String!) {\n  data: freetalk_findFirstChat(where: {id: {equals: $id}}) {\n    currentSceneId\n    id\n    teacherId\n    updatedAt\n    userId\n    createdAt\n  }\n}",
		"createTime": "2023-04-25 11:11:53Z",
		"deleteTime": "",
		"enabled": true,
		"id": 1675425809825792,
		"illegal": false,
		"isPublic": true,
		"liveQuery": false,
		"method": "GET",
		"operationType": "queries",
		"remark": "",
		"restUrl": "",
		"roleType": "",
		"roles": "",
		"title": "/Chat/GetOneChat",
		"updateTime": "2023-04-28 07:38:36Z"
	},
	{
		"content": "query GetOnePromptText($usageId: String!, $usage: freetalk_PromptTextUsage = Helper) {\n  data: freetalk_findFirstPromptText(\n    where: {usage: {equals: $usage}, usageId: {equals: $usageId}}\n  ) {\n    content\n    id\n    name\n  }\n}",
		"createTime": "2023-04-23 03:48:30Z",
		"deleteTime": "",
		"enabled": true,
		"id": 1662357748121600,
		"illegal": false,
		"isPublic": true,
		"liveQuery": false,
		"method": "GET",
		"operationType": "queries",
		"remark": "",
		"restUrl": "",
		"roleType": "",
		"roles": "",
		"title": "/PromptText/GetOnePromptText",
		"updateTime": "2023-05-30 11:38:24Z"
	},
	{
		"content": "query GetChatMessageRecent($userId: String! @fromClaim(name: USERID), $take: Int = 10, $teacherId: String!, $sceneId: String, $skip: Int = 0) {\n  data: freetalk_findManyChatMessage(\n    orderBy: {createdAt: desc}\n    take: $take\n    where: {Chat: {is: {userId: {equals: $userId}, teacherId: {equals: $teacherId}, currentSceneId: {equals: $sceneId}}}}\n    skip: $skip\n  ) {\n    audioUrl\n    chatId\n    content\n    costDuration\n    errorRecovery\n    createdAt\n    id\n    role\n    updatedAt\n    nativeContent\n    createWith\n    audioDuration\n  }\n  total: freetalk_aggregateChatMessage(\n    where: {Chat: {is: {userId: {equals: $userId}, teacherId: {equals: $teacherId}, currentSceneId: {equals: $sceneId}}}}\n  ) @transform(get: \"_count.id\") {\n    _count {\n      id\n    }\n  }\n}",
		"createTime": "2023-04-26 02:44:52Z",
		"deleteTime": "",
		"enabled": true,
		"id": 1679094414180352,
		"illegal": false,
		"isPublic": true,
		"liveQuery": false,
		"method": "GET",
		"operationType": "queries",
		"remark": "",
		"restUrl": "",
		"roleType": "",
		"roles": "",
		"title": "/Chat/Message/GetChatMessageRecent",
		"updateTime": "2023-05-31 09:54:41Z"
	},
	{
		"content": "query MyQuery($userId: String! @fromClaim(name: USERID)) {\n  data: freetalk_findFirstChat(\n    orderBy: {updatedAt: desc}\n    where: {User: {is: {id: {equals: $userId}}}, Scene: {is: {SceneCategory: {is: {usage: {equals: System}}}}}}\n  ) {\n    id\n    scene: Scene {\n      id\n      name\n      categoryId\n    }\n    teacher: Teacher {\n      age\n      avatar\n      feature\n      gender\n      name\n      id\n      updatedAt\n      createdAt\n    }\n  }\n}",
		"createTime": "2023-04-26 03:47:55Z",
		"deleteTime": "",
		"enabled": true,
		"id": 1679342382153728,
		"illegal": false,
		"isPublic": true,
		"liveQuery": false,
		"method": "GET",
		"operationType": "queries",
		"remark": "",
		"restUrl": "",
		"roleType": "",
		"roles": "",
		"title": "/Chat/GetLastChat",
		"updateTime": "2023-06-09 08:07:40Z"
	},
	{
		"content": "mutation MyQuery($difficulty: String!, $userId: String! @fromClaim(name: USERID)) {\n  data: freetalk_updateOneUser(\n    data: {difficulty: {set: $difficulty}}\n    where: {id: $userId}\n  ) {\n    id\n  }\n}",
		"createTime": "2023-04-26 05:33:48Z",
		"deleteTime": "",
		"enabled": true,
		"id": 1679758722138112,
		"illegal": false,
		"isPublic": true,
		"liveQuery": false,
		"method": "POST",
		"operationType": "mutations",
		"remark": "",
		"restUrl": "",
		"roleType": "",
		"roles": "",
		"title": "/UserSetting/SetLanguageDifficulty",
		"updateTime": "2023-04-26 05:35:20Z"
	},
	{
		"content": "mutation MyQuery($speed: String!, $userId: String! @fromClaim(name: USERID)) {\n  data: freetalk_updateOneUser(\n    data: {speedOfSpeech: { set:$speed}}\n    where: {id: $userId}\n  ) {\n    id\n  }\n}",
		"createTime": "2023-04-26 05:35:34Z",
		"deleteTime": "",
		"enabled": true,
		"id": 1679765680685056,
		"illegal": false,
		"isPublic": true,
		"liveQuery": false,
		"method": "POST",
		"operationType": "mutations",
		"remark": "",
		"restUrl": "",
		"roleType": "",
		"roles": "",
		"title": "/UserSetting/SetSpeedOfSpeech",
		"updateTime": "2023-04-26 05:36:17Z"
	},
	{
		"content": "mutation CostAccountDuration($id: String!, $updatedAt: DateTime! @injectCurrentDateTime(format: ISO8601), $duration: Float!) {\n  data: freetalk_updateOneAccount(\n    data: {updatedAt: {set: $updatedAt}, leftDuration: {decrement: $duration}, costDuration: {increment: $duration}}\n    where: {id: $id}\n  ) {\n    id\n  }\n}",
		"createTime": "2023-04-26 07:08:16Z",
		"deleteTime": "",
		"enabled": true,
		"id": 1680130153578496,
		"illegal": false,
		"isPublic": true,
		"liveQuery": false,
		"method": "POST",
		"operationType": "mutations",
		"remark": "",
		"restUrl": "",
		"roleType": "",
		"roles": "",
		"title": "/Account/CostAccountDuration",
		"updateTime": "2023-05-23 08:45:47Z"
	},
	{
		"content": "query GetRandomChatConfig($userId: String! @fromClaim(name: USERID)) {\n  sceneId: freetalk_findFirstScene(\n    where: {SceneCategory: {is: {usage: {equals: Random}}}}\n  ) @transform(get: \"id\") {\n    id\n  }\n  teacherId: freetalk_findFirstTeacher(where: {displayUsage: {equals: Random}}) @transform(get: \"id\") {\n    id\n  }\n  data: freetalk_findFirstChat(\n    where: {Scene: {is: {SceneCategory: {is: {usage: {equals: Random}}}}}, Teacher: {is: {displayUsage: {equals: Random}}}, User: {is: {id: {equals: $userId}}}}\n  ) {\n    sceneId: currentSceneId\n    teacherId\n    updatedAt\n    userId\n    createdAt\n    id\n  }\n}",
		"createTime": "2023-04-26 07:27:21Z",
		"deleteTime": "",
		"enabled": true,
		"id": 1680205217267712,
		"illegal": false,
		"isPublic": true,
		"liveQuery": false,
		"method": "GET",
		"operationType": "queries",
		"remark": "",
		"restUrl": "",
		"roleType": "",
		"roles": "",
		"title": "/Chat/GetRandomChat",
		"updateTime": "2023-06-09 08:09:21Z"
	},
	{
		"content": "query GptQuery($chatCtxLimit: Int = 10, $chatId: String, $usage: String!, $message: String, $helper: String, $helperArgs: String) {\n  data: gpt_chat_query(\n    chatCtxLimit: $chatCtxLimit\n    chatId: $chatId\n    message: $message\n    helper: $helper\n    usage: $usage\n    helperArgs: $helperArgs\n  )\n}",
		"createTime": "2023-04-28 03:15:41Z",
		"deleteTime": "",
		"enabled": true,
		"id": 1690540227100672,
		"illegal": false,
		"isPublic": true,
		"liveQuery": true,
		"method": "GET",
		"operationType": "queries",
		"remark": "",
		"restUrl": "",
		"roleType": "",
		"roles": "",
		"title": "/GPT/ChatQuery",
		"updateTime": "2023-06-08 06:13:28Z"
	},
	{
		"content": "query GetManyMembership($membershipId: String @internal) {\n  data: freetalk_findManyMembership(where: {price: {not: {equals: 0}}}) {\n    purchaseLimit\n    lifespan\n    description\n    createdAt\n    id @export(as: \"membershipId\")\n    name\n    presentDuration\n    price\n    imageUrl\n    discount: _join @transform(get: \"freetalk_findFirstDiscount\") {\n      freetalk_findFirstDiscount(where: {usageId: {equals: $membershipId}, usage: {equals: Membership}}) {\n        description\n        name\n        value\n        expireAt\n      }\n    }\n  }\n} ",
		"createTime": "2023-05-04 11:30:17Z",
		"deleteTime": "",
		"enabled": true,
		"id": 1726458967425024,
		"illegal": false,
		"isPublic": true,
		"liveQuery": false,
		"method": "GET",
		"operationType": "queries",
		"remark": "",
		"restUrl": "",
		"roleType": "",
		"roles": "",
		"title": "/Membership/GetManyMembership",
		"updateTime": "2023-06-12 07:35:30Z"
	},
	{
		"content": "query MyQuery($membershipId: String @internal, $accountId: String! @fromClaim(name: USERID)) {\n  data: freetalk_findFirstMembership(where: {price: {equals: 0}}) {\n    description\n    id @export(as: \"membershipId\")\n    lifespan\n    name\n    presentDuration\n    price\n    imageUrl\n    payCount: _join @transform(get: \"freetalk_aggregatePayment._count.id\") {\n      freetalk_aggregatePayment(\n        where: {usageId: {equals: $membershipId}, accountId: {equals: $accountId}, usage: {equals: Membership}}\n      ) {\n        _count {\n          id\n        }\n      }\n    }\n  }\n}",
		"createTime": "2023-05-04 11:32:46Z",
		"deleteTime": "",
		"enabled": true,
		"id": 1726468725866496,
		"illegal": false,
		"isPublic": true,
		"liveQuery": false,
		"method": "GET",
		"operationType": "queries",
		"remark": "",
		"restUrl": "",
		"roleType": "",
		"roles": "",
		"title": "/Membership/GetFreeMembership",
		"updateTime": "2023-06-01 05:41:00Z"
	},
	{
		"content": "mutation UnifiedOrder($accountId: String! @fromClaim(name: USERID), $durationPackageId: String!, $payType: String!) {\n  data: payment_unifiedOrder(\n    accountId: $accountId\n    product: \"DurationPackage\"\n    productId: $durationPackageId\n    payType: $payType\n  )\n} ",
		"createTime": "2023-05-05 06:44:01Z",
		"deleteTime": "",
		"enabled": true,
		"id": 1730995621003264,
		"illegal": false,
		"isPublic": true,
		"liveQuery": false,
		"method": "POST",
		"operationType": "mutations",
		"remark": "",
		"restUrl": "",
		"roleType": "",
		"roles": "",
		"title": "/Payment/OrderDurationPackage",
		"updateTime": "2023-06-02 13:43:03Z"
	},
	{
		"content": "mutation PayNotify($data: String!) {\n  payment_payNotify(\n    payType: \"aliPay\",\n    data: $data\n  )\n}",
		"createTime": "2023-05-05 07:22:52Z",
		"deleteTime": "",
		"enabled": true,
		"id": 1731148393152512,
		"illegal": false,
		"isPublic": true,
		"liveQuery": false,
		"method": "POST",
		"operationType": "mutations",
		"remark": "",
		"restUrl": "",
		"roleType": "",
		"roles": "",
		"title": "/Payment/PayNotify_aliPay",
		"updateTime": "2023-06-06 05:42:41Z"
	},
	{
		"content": "query GetOneDurationPackage($id: String!) {\n  data: freetalk_findFirstDurationPackage(where: {id: {equals: $id}}) {\n    price\n    value\n    name\n    discount: _join @transform(get: \"freetalk_findFirstDiscount\") {\n      freetalk_findFirstDiscount(where: {usageId: {equals: $id}, usage: {equals: DurationPackage}}) {\n        description\n        name\n        value\n        expireAt\n      }\n    }\n  }\n}",
		"createTime": "2023-05-05 07:34:11Z",
		"deleteTime": "",
		"enabled": true,
		"id": 1731192839798784,
		"illegal": false,
		"isPublic": true,
		"liveQuery": false,
		"method": "GET",
		"operationType": "queries",
		"remark": "",
		"restUrl": "",
		"roleType": "",
		"roles": "",
		"title": "/Duration/GetOneDurationPackage",
		"updateTime": "2023-06-01 05:55:20Z"
	},
	{
		"content": "query MyQuery($id: String!, $currentTime: DateTime! @injectCurrentDateTime(format: ISO8601), $userId: String @fromClaim(name: USERID)) {\n  data: freetalk_findFirstMembership(where: {id: {equals: $id}}) {\n    price\n    purchaseLimit\n    presentDuration\n    name\n    lifespan\n    description\n    imageUrl\n    discount: _join @transform(get: \"freetalk_findFirstDiscount\") {\n      freetalk_findFirstDiscount(\n        where: {usageId: {equals: $id}, usage: {equals: Membership}}\n      ) {\n        description\n        name\n        value\n        expireAt\n      }\n    }\n    reduction: _join @transform(get: \"freetalk_findFirstAccount.Membership.price\") {\n      freetalk_findFirstAccount(\n        where: {id: {equals: $userId}, membershipEndTime:{gte: $currentTime}}\n      ) {\n        Membership{\n          price\n        }\n      }\n    }\n  }\n} ",
		"createTime": "2023-05-05 07:46:38Z",
		"deleteTime": "",
		"enabled": true,
		"id": 1731241828614144,
		"illegal": false,
		"isPublic": true,
		"liveQuery": false,
		"method": "GET",
		"operationType": "queries",
		"remark": "",
		"restUrl": "",
		"roleType": "",
		"roles": "",
		"title": "/Membership/GetOneMembership",
		"updateTime": "2023-06-13 02:52:16Z"
	},
	{
		"content": "mutation CreateOnePayment($orderAmount: Float!, $orderNumber: String!, $accountId: String! @fromClaim(name: USERID), $packageId: String!, $updatedAt: DateTime! @injectCurrentDateTime(format: ISO8601), $payType: String!, $sn: String, $expireAt: DateTime!) {\n  data: freetalk_createOnePayment(\n    data: {updatedAt: $updatedAt, orderNumber: $orderNumber, orderAmount: $orderAmount, Account: {connect: {id: $accountId}}, usageId: $packageId, usage: DurationPackage, payType: $payType, sn: $sn, expireAt: $expireAt}\n  ) {\n    id\n  }\n}",
		"createTime": "2023-05-08 08:12:36Z",
		"deleteTime": "",
		"enabled": true,
		"id": 1748330840588288,
		"illegal": false,
		"isPublic": true,
		"liveQuery": false,
		"method": "POST",
		"operationType": "mutations",
		"remark": "",
		"restUrl": "",
		"roleType": "",
		"roles": "",
		"title": "/Payment/CreatePaymentDurationPackage",
		"updateTime": "2023-06-12 08:50:13Z"
	},
	{
		"content": "mutation UpdateOnePayment($orderNumber: String!, $paymentDate: DateTime, $paymentStatus: freetalk_PaymentStatus!, $paymentResp: String, $usageId: String @internal) {\n  data: freetalk_updateOnePayment(\n    data: {paymentStatus: $paymentStatus, paymentDate: {set: $paymentDate}, paymentResp: {set: $paymentResp}}\n    where: {orderNumber: $orderNumber}\n  ) {\n    id\n    accountId\n    usage\n    usageId @export(as: \"usageId\")\n    membershipPresent: _join @transform(get: \"freetalk_findFirstMembership.presentDuration\") {\n      freetalk_findFirstMembership(where: {id: {equals: $usageId}}) {\n        presentDuration\n      }\n    }\n    durationValue: _join @transform(get: \"freetalk_findFirstDurationPackage.value\") {\n      freetalk_findFirstDurationPackage(where: {id: {equals: $usageId}}) {\n        value\n      }\n    }\n  }\n}",
		"createTime": "2023-05-08 08:14:59Z",
		"deleteTime": "",
		"enabled": true,
		"id": 1748340244807680,
		"illegal": false,
		"isPublic": true,
		"liveQuery": false,
		"method": "POST",
		"operationType": "mutations",
		"remark": "",
		"restUrl": "",
		"roleType": "",
		"roles": "",
		"title": "/Payment/UpdateOnePayment",
		"updateTime": "2023-06-02 13:39:22Z"
	},
	{
		"content": "query MyQuery($userId: String! @fromClaim(name: USERID)) {\n  data: freetalk_findFirstUser(\n    where: {id: {equals: $userId}, enabled: {equals: true}}\n  ) {\n    id\n    age\n    avatar\n    clientDisplayLanguages\n    difficulty\n    learningPurpose\n    nickname\n    phone\n    profession\n    speedOfSpeech\n    nativeLanguage\n    learningLanguage: LearningLanguage {\n      name\n      id\n    }\n    account: Account {\n      leftDuration\n      membershipEndTime\n      membershipName: Membership @transform(get: \"name\") {\n        name\n      }\n    }\n  }\n}",
		"createTime": "2023-05-09 03:15:16Z",
		"deleteTime": "",
		"enabled": true,
		"id": 1752824010964992,
		"illegal": false,
		"isPublic": true,
		"liveQuery": false,
		"method": "GET",
		"operationType": "queries",
		"remark": "",
		"restUrl": "",
		"roleType": "",
		"roles": "",
		"title": "/User/Me",
		"updateTime": "2023-06-08 09:11:20Z"
	},
	{
		"content": "mutation FetchAccountDuration($id: String!, $updatedAt: DateTime! @injectCurrentDateTime(format: ISO8601), $duration: Float!) {\n  data: freetalk_updateOneAccount(\n    data: {updatedAt: {set: $updatedAt}, leftDuration: {increment: $duration}}\n    where: {id: $id}\n  ) {\n    id\n  }\n} ",
		"createTime": "2023-05-09 01:35:40Z",
		"deleteTime": "",
		"enabled": true,
		"id": 1752432385130496,
		"illegal": false,
		"isPublic": true,
		"liveQuery": false,
		"method": "POST",
		"operationType": "mutations",
		"remark": "",
		"restUrl": "",
		"roleType": "",
		"roles": "",
		"title": "/Account/FetchAccountDuration",
		"updateTime": "2023-06-07 10:01:24Z"
	},
	{
		"content": "query GetAccountByChatId($chatId: String!) {\n  data: freetalk_findFirstAccount(\n    where: {User: {is: {Chat: {some: {id: {equals: $chatId}}}}}}\n  ) {\n    id\n    leftDuration\n    costDuration\n    updatedAt\n    Membership {\n      presentDuration\n    }\n  }\n}",
		"createTime": "2023-05-10 02:40:27Z",
		"deleteTime": "",
		"enabled": true,
		"id": 1758349436321792,
		"illegal": false,
		"isPublic": true,
		"liveQuery": false,
		"method": "GET",
		"operationType": "queries",
		"remark": "",
		"restUrl": "",
		"roleType": "",
		"roles": "",
		"title": "/Account/GetAccountByChatId",
		"updateTime": "2023-06-09 02:51:19Z"
	},
	{
		"content": "mutation CreateCostDurationHistory($accountId: String! @fromClaim(name: USERID), $value: Float!, $updatedAt: DateTime! @injectCurrentDateTime(format: ISO8601), $messageId: String!) {\n  data: freetalk_createOneDurationHisotory(\n    data: {Account: {connect: {id: $accountId}}, updatedAt: $updatedAt, value: $value, usage: ChatMessage, usageId: $messageId}\n  ) {\n    id\n  }\n} ",
		"createTime": "2023-05-10 07:52:15Z",
		"deleteTime": "",
		"enabled": true,
		"id": 1759575482957824,
		"illegal": false,
		"isPublic": true,
		"liveQuery": false,
		"method": "POST",
		"operationType": "mutations",
		"remark": "",
		"restUrl": "",
		"roleType": "",
		"roles": "",
		"title": "/Duration/CreateCostDurationHistory",
		"updateTime": "2023-06-01 06:19:58Z"
	},
	{
		"content": "query GetCostDurationHistory($accountId: String! @fromClaim(name: USERID), $createAtGte: DateTime!, $createAtLte: DateTime!) {\n  data: freetalk_groupByDurationHisotory(\n    by: createdAt\n    where: {accountId: {equals: $accountId}, createdAt: {gte: $createAtGte}, AND: {createdAt: {lte: $createAtLte}, usage: {equals: ChatMessage}}}\n  ) {\n    createdAt\n    value: _sum @transform(get: \"value\") {\n      value\n    }\n  }\n  sum: freetalk_aggregateDurationHisotory(\n    where: {accountId: {equals: $accountId}, createdAt: {gte: $createAtGte}, AND: {createdAt: {lte: $createAtLte}}, usage: {equals: ChatMessage}}\n  ) @transform(get: \"_sum.value\") {\n    _sum {\n      value\n    }\n  }\n}",
		"createTime": "2023-05-10 07:59:25Z",
		"deleteTime": "",
		"enabled": true,
		"id": 1759603661864960,
		"illegal": false,
		"isPublic": true,
		"liveQuery": false,
		"method": "GET",
		"operationType": "queries",
		"remark": "",
		"restUrl": "",
		"roleType": "",
		"roles": "",
		"title": "/Duration/GetCostDurationHistory",
		"updateTime": "2023-05-16 01:36:14Z"
	},
	{
		"content": "query GetPaymentDurationHistory($accountId: String! @fromClaim(name: USERID), $createAtGte: DateTime!, $createAtLte: DateTime!, $usageId: String @internal, $paymentUsageId: String @internal) {\n  data: freetalk_findManyDurationHisotory(\n    where: {accountId: {equals: $accountId}, createdAt: {gte: $createAtGte}, AND: {createdAt: {lte: $createAtLte}}, usage: {equals: Payment}}\n  ) {\n    createdAt\n    usage\n    usageId @export(as: \"usageId\")\n    value\n    payment: _join @transform(get: \"freetalk_findFirstPayment\") {\n      freetalk_findFirstPayment(where: {orderNumber: {equals: $usageId}}) {\n        usageId @export(as: \"paymentUsageId\")\n        usage \n        membership: _join @transform(get: \"freetalk_findFirstMembership.name\") {\n      \t  freetalk_findFirstMembership(where: {id: {equals: $paymentUsageId}}) {\n            name\n          }\n        }\n        durationPackage: _join @transform(get: \"freetalk_findFirstDurationPackage.name\") {\n      \t  freetalk_findFirstDurationPackage(where: {id: {equals: $paymentUsageId}}) {\n            name\n          }\n        }\n      }\n    }\n  }\n  sum: freetalk_aggregateDurationHisotory(\n    where: {accountId: {equals: $accountId}, createdAt: {gte: $createAtGte}, AND: {createdAt: {lte: $createAtLte}}, usage: {equals: Payment}}\n  ) @transform(get: \"_sum.value\") {\n    _sum {\n      value\n    }\n  }\n}",
		"createTime": "2023-05-10 09:51:18Z",
		"deleteTime": "",
		"enabled": true,
		"id": 1760043578359808,
		"illegal": false,
		"isPublic": true,
		"liveQuery": false,
		"method": "GET",
		"operationType": "queries",
		"remark": "",
		"restUrl": "",
		"roleType": "",
		"roles": "",
		"title": "/Duration/GetPaymentDurationHistory",
		"updateTime": "2023-06-01 06:15:26Z"
	},
	{
		"content": "mutation MyQuery($id: String! @fromClaim(name: USERID), $clientDisplayLanguages: freetalk_ClientDisplayLanguages = None) {\n  data: freetalk_updateOneUser(\n    data: {clientDisplayLanguages: $clientDisplayLanguages}\n    where: {id: $id}\n  ) {\n    id\n  }\n}",
		"createTime": "2023-05-11 03:38:12Z",
		"deleteTime": "",
		"enabled": true,
		"id": 1764238781186048,
		"illegal": false,
		"isPublic": true,
		"liveQuery": false,
		"method": "POST",
		"operationType": "mutations",
		"remark": "",
		"restUrl": "",
		"roleType": "",
		"roles": "",
		"title": "/UserSetting/SetDisplayLanguageMode",
		"updateTime": "2023-05-11 03:39:25Z"
	},
	{
		"content": "mutation CreateOnePayment($orderAmount: Float!, $orderNumber: String!, $accountId: String! @fromClaim(name: USERID), $membershipId: String!, $updatedAt: DateTime! @injectCurrentDateTime(format: ISO8601), $payType: String!, $sn: String, $expireAt: DateTime!) {\n  data: freetalk_createOnePayment(\n    data: {updatedAt: $updatedAt, orderNumber: $orderNumber, orderAmount: $orderAmount, Account: {connect: {id: $accountId}}, usageId: $membershipId, usage: Membership, payType: $payType, sn: $sn, expireAt: $expireAt}\n  ) {\n    id\n  }\n}",
		"createTime": "2023-05-11 09:21:14Z",
		"deleteTime": "",
		"enabled": true,
		"id": 1765587641303040,
		"illegal": false,
		"isPublic": true,
		"liveQuery": false,
		"method": "POST",
		"operationType": "mutations",
		"remark": "",
		"restUrl": "",
		"roleType": "",
		"roles": "",
		"title": "/Payment/CreatePaymentMembership",
		"updateTime": "2023-06-12 08:50:26Z"
	},
	{
		"content": "query GetPaymentCountByMembership($membershipId: String!, $accountId: String! @fromClaim(name: USERID)) {\n  data: freetalk_aggregatePayment(\n    where: {usageId: {equals: $membershipId}, usage: {equals: Membership}, accountId: {equals: $accountId}}\n  ) {\n    count: _count @transform(get: \"id\") {\n      id\n    }\n  }\n}",
		"createTime": "2023-05-11 10:43:00Z",
		"deleteTime": "",
		"enabled": true,
		"id": 1765909177040896,
		"illegal": false,
		"isPublic": true,
		"liveQuery": false,
		"method": "GET",
		"operationType": "queries",
		"remark": "",
		"restUrl": "",
		"roleType": "",
		"roles": "",
		"title": "/Payment/GetPaymentCountByMembership",
		"updateTime": "2023-06-01 05:44:48Z"
	},
	{
		"content": "mutation SetChatAudioUrl($id: String!, $audioUrl: String!, $updatedAt: DateTime! @injectCurrentDateTime(format: ISO8601), $audioDuration: Float!) {\n  data: freetalk_updateOneChatMessage(\n    data: {audioUrl: {set: $audioUrl}, updatedAt: {set: $updatedAt}, audioDuration: {set: $audioDuration}}\n    where: {id: $id}\n  ) {\n    id\n  }\n}",
		"createTime": "2023-05-14 06:59:03Z",
		"deleteTime": "",
		"enabled": true,
		"id": 1782015534563328,
		"illegal": false,
		"isPublic": true,
		"liveQuery": false,
		"method": "POST",
		"operationType": "mutations",
		"remark": "",
		"restUrl": "",
		"roleType": "",
		"roles": "",
		"title": "/Chat/Message/SetChatAudioUrl",
		"updateTime": "2023-05-15 05:57:08Z"
	},
	{
		"content": "mutation SetChatNativeContent($id: String!, $nativeContent: String!, $updatedAt: DateTime! @injectCurrentDateTime(format: ISO8601)) {\n  data: freetalk_updateOneChatMessage(\n    data: {nativeContent: {set: $nativeContent}, updatedAt: {set: $updatedAt}}\n    where: {id: $id}\n  ) {\n    id\n  }\n} ",
		"createTime": "2023-05-14 08:10:19Z",
		"deleteTime": "",
		"enabled": true,
		"id": 1782295715708928,
		"illegal": false,
		"isPublic": true,
		"liveQuery": false,
		"method": "POST",
		"operationType": "mutations",
		"remark": "",
		"restUrl": "",
		"roleType": "",
		"roles": "",
		"title": "/Chat/Message/SetChatNativeContent",
		"updateTime": "2023-05-14 08:11:15Z"
	},
	{
		"content": "mutation SetChatContent($id: String!, $content: String!, $updatedAt: DateTime! @injectCurrentDateTime(format: ISO8601)) {\n  data: freetalk_updateOneChatMessage(\n    data: {content: {set: $content}, updatedAt: {set: $updatedAt}}\n    where: {id: $id}\n  ) {\n    id\n  }\n} ",
		"createTime": "2023-05-14 08:11:20Z",
		"deleteTime": "",
		"enabled": true,
		"id": 1782299772715008,
		"illegal": false,
		"isPublic": true,
		"liveQuery": false,
		"method": "POST",
		"operationType": "mutations",
		"remark": "",
		"restUrl": "",
		"roleType": "",
		"roles": "",
		"title": "/Chat/Message/SetChatContent",
		"updateTime": "2023-05-14 08:11:58Z"
	},
	{
		"content": "query MyQuery($equals: String! @fromClaim(name: USERID)) {\n  data: freetalk_findFirstAccount(\n    where: {id: {equals: $equals}, User: {is: {enabled: {equals: true}}}}\n  ) {\n    leftDuration\n    costDuration\n  }\n}",
		"createTime": "2023-05-15 01:25:43Z",
		"deleteTime": "",
		"enabled": true,
		"id": 1786367135776768,
		"illegal": false,
		"isPublic": true,
		"liveQuery": false,
		"method": "GET",
		"operationType": "queries",
		"remark": "",
		"restUrl": "",
		"roleType": "",
		"roles": "",
		"title": "/Account/GetMyCost",
		"updateTime": "2023-05-15 01:26:04Z"
	},
	{
		"content": "mutation UnifiedOrder($accountId: String! @fromClaim(name: USERID), $membershipId: String!, $payType: String!) {\n  data: payment_unifiedOrder(\n    accountId: $accountId\n    product: \"Membership\"\n    productId: $membershipId\n    payType: $payType\n  )\n}",
		"createTime": "2023-05-16 01:40:42Z",
		"deleteTime": "",
		"enabled": true,
		"id": 1792088341348352,
		"illegal": false,
		"isPublic": true,
		"liveQuery": false,
		"method": "POST",
		"operationType": "mutations",
		"remark": "",
		"restUrl": "",
		"roleType": "",
		"roles": "",
		"title": "/Payment/OrderMembership",
		"updateTime": "2023-06-02 13:43:14Z"
	},
	{
		"content": "query GetCDKEYList($take: Int = 10, $skip: Int = 0, $usageId: String @internal) {\n  data: freetalk_findManyCDKEY(\n    orderBy: {createdAt: desc}\n    take: $take\n    skip: $skip\n    where: {redeemed: {equals: true}}\n  ) {\n    createdAt\n    id\n    code\n    redeemAt\n    usage\n    usageId @export(as: \"usageId\")\n    membership: _join @transform(get: \"freetalk_findFirstMembership.name\") {\n      freetalk_findFirstMembership(where: {id: {equals: $usageId}}) {\n        name\n      }\n    }\n    durationPackage: _join @transform(get: \"freetalk_findFirstDurationPackage.name\") {\n      freetalk_findFirstDurationPackage(where: {id: {equals: $usageId}}) {\n        name\n      }\n    }\n    account: Account @transform(get: \"User.nickname\") {\n      User {\n        nickname\n      }\n    }\n  }\n  total: freetalk_aggregateCDKEY(where: {redeemed: {equals: true}}) @transform(get: \"_count.id\") {\n    _count {\n      id\n    }\n  }\n}",
		"createTime": "2023-05-16 02:49:01Z",
		"deleteTime": "",
		"enabled": true,
		"id": 1792356949229568,
		"illegal": false,
		"isPublic": true,
		"liveQuery": false,
		"method": "GET",
		"operationType": "queries",
		"remark": "",
		"restUrl": "",
		"roleType": "",
		"roles": "",
		"title": "/CDKEY/GetRedeemRecord",
		"updateTime": "2023-06-01 03:01:34Z"
	},
	{
		"content": "mutation RedeemCDKEY($code: String!, $redeemAt: DateTime @injectCurrentDateTime(format: ISO8601), $accountId: String! @fromClaim(name: USERID), $usageId: String @internal) {\n  data: freetalk_updateOneCDKEY(\n    data: {redeemAt: {set: $redeemAt}, Account: {connect: {id: $accountId}}, redeemed: {set: true}}\n    where: {code: $code}\n  ) {\n    id\n    usage\n    usageId @export(as: \"usageId\")\n    membership: _join @transform(get: \"freetalk_findFirstMembership\") {\n      freetalk_findFirstMembership(where: {id: {equals: $usageId}}) {\n        id\n        name\n        presentDuration\n      }\n    }\n    durationPackage: _join @transform(get: \"freetalk_findFirstDurationPackage\") {\n      freetalk_findFirstDurationPackage(where: {id: {equals: $usageId}}) {\n        id\n        name\n        value\n      }\n    }\n  }\n}",
		"createTime": "2023-05-16 02:55:54Z",
		"deleteTime": "",
		"enabled": true,
		"id": 1792384054788096,
		"illegal": false,
		"isPublic": true,
		"liveQuery": false,
		"method": "POST",
		"operationType": "mutations",
		"remark": "",
		"restUrl": "",
		"roleType": "",
		"roles": "",
		"title": "/CDKEY/RedeemCDKEY",
		"updateTime": "2023-06-01 03:05:06Z"
	},
	{
		"content": "mutation CreateCDKEYDurationHistory($accountId: String! @fromClaim(name: USERID), $value: Float!, $updatedAt: DateTime! @injectCurrentDateTime(format: ISO8601), $CKDKEYId: String!) {\n  data: freetalk_createOneDurationHisotory(\n    data: {Account: {connect: {id: $accountId}}, updatedAt: $updatedAt, value: $value, usage: CDKEY, usageId: $CKDKEYId}\n  ) {\n    id\n  }\n}",
		"createTime": "2023-05-16 12:29:49Z",
		"deleteTime": "",
		"enabled": true,
		"id": 1794640768466944,
		"illegal": false,
		"isPublic": true,
		"liveQuery": false,
		"method": "POST",
		"operationType": "mutations",
		"remark": "",
		"restUrl": "",
		"roleType": "",
		"roles": "",
		"title": "/Duration/CreateCDKEYDurationHistory",
		"updateTime": "2023-06-01 04:05:09Z"
	},
	{
		"content": "query GETCDKEYyCode($code: String!) {\n  data: freetalk_findFirstCDKEY(where: {code: {equals: $code}}) {\n    redeemed\n    id\n  }\n}",
		"createTime": "2023-05-17 01:25:35Z",
		"deleteTime": "",
		"enabled": true,
		"id": 1797691173109760,
		"illegal": false,
		"isPublic": true,
		"liveQuery": false,
		"method": "GET",
		"operationType": "queries",
		"remark": "",
		"restUrl": "",
		"roleType": "",
		"roles": "",
		"title": "/CDKEY/GetCDKKEYByCode",
		"updateTime": "2023-05-17 01:29:42Z"
	},
	{
		"content": "query MyQuery($usageId: String @internal) {\n  data: freetalk_findManyPayment(where: {paymentStatus: {equals: PENDING}}) {\n    accountId\n    createdAt\n    id\n    usage\n    usageId @export(as: \"usageId\")\n    orderNumber\n    orderDate\n    orderAmount\n    paymentDate\n    paymentStatus\n    updatedAt\n    payType\n    membershipPresent: _join @transform(get: \"freetalk_findFirstMembership.presentDuration\") {\n      freetalk_findFirstMembership(where: {id: {equals: $usageId}}) {\n        presentDuration\n      }\n    }\n    durationValue: _join @transform(get: \"freetalk_findFirstDurationPackage.value\") {\n      freetalk_findFirstDurationPackage(where: {id: {equals: $usageId}}) {\n        value\n      }\n    }\n    sn\n    expireAt\n  }\n}",
		"createTime": "2023-05-17 02:01:51Z",
		"deleteTime": "",
		"enabled": true,
		"id": 1797833818374144,
		"illegal": false,
		"isPublic": true,
		"liveQuery": false,
		"method": "GET",
		"operationType": "queries",
		"remark": "",
		"restUrl": "",
		"roleType": "",
		"roles": "",
		"title": "/Payment/GetPendingPayments",
		"updateTime": "2023-06-12 07:48:06Z"
	},
	{
		"content": "query MyQuery($id: String!) {\n  data: freetalk_findUniquePayment(where: {id: $id}) {\n    accountId\n    createdAt\n    id\n    usage\n    usageId\n    orderDate\n    orderAmount\n    orderNumber\n    paymentDate\n    paymentResp\n    paymentStatus\n    updatedAt\n    payType\n  }\n}",
		"createTime": "2023-05-18 05:39:29Z",
		"deleteTime": "",
		"enabled": true,
		"id": 1804351881674752,
		"illegal": false,
		"isPublic": true,
		"liveQuery": false,
		"method": "GET",
		"operationType": "queries",
		"remark": "",
		"restUrl": "",
		"roleType": "",
		"roles": "",
		"title": "/Payment/GetOnePayment",
		"updateTime": "2023-06-01 05:42:51Z"
	},
	{
		"content": "query MyQuery($skip: Int = 10, $take: Int = 10, $accountId: String! @fromClaim(name: USERID), $usageId: String @internal) {\n  data: freetalk_findManyPayment(\n    skip: $skip\n    take: $take\n    where: {accountId: {equals: $accountId}}\n  ) {\n    accountId\n    createdAt\n    id\n    orderAmount\n    orderDate\n    orderNumber\n    paymentDate\n    paymentResp\n    paymentStatus\n    updatedAt\n    payType\n    usage\n    usageId @export(as: \"usageId\")\n    membershipPresent: _join @transform(get: \"freetalk_findFirstMembership.presentDuration\") {\n      freetalk_findFirstMembership(where: {id: {equals: $usageId}}) {\n        presentDuration\n        name\n      }\n    }\n    durationValue: _join @transform(get: \"freetalk_findFirstDurationPackage.value\") {\n      freetalk_findFirstDurationPackage(where: {id: {equals: $usageId}}) {\n        value\n        name\n      }\n    }\n    sn\n    expireAt\n  }\n  total: freetalk_aggregatePayment(where: {accountId: {equals: $accountId}}) @transform(get: \"_count.id\") {\n    _count {\n      id\n    }\n  }\n} ",
		"createTime": "2023-05-18 05:48:35Z",
		"deleteTime": "",
		"enabled": true,
		"id": 1804387645390848,
		"illegal": false,
		"isPublic": true,
		"liveQuery": false,
		"method": "GET",
		"operationType": "queries",
		"remark": "",
		"restUrl": "",
		"roleType": "",
		"roles": "",
		"title": "/Payment/GetManyPayments",
		"updateTime": "2023-06-12 08:26:56Z"
	},
	{
		"content": "mutation CreateOneAnnouncement($abstract: String = \"\", $annoType: freetalk_AnnoType!, $content: String!, $startTime: DateTime @injectCurrentDateTime(format: ISO8601), $isSend: Boolean = false, $title: String!, $userId: String!, $updatedAt: DateTime! @injectCurrentDateTime(format: ISO8601), $annoScope: freetalk_AnnoScope = ALL) {\n  data: freetalk_createOneAnnouncement(\n    data: {title: $title, abstract: $abstract, content: $content, startTime: $startTime, isSend: $isSend, User: {connect: {id: $userId}}, updatedAt: $updatedAt, annoType: $annoType, annoScope: $annoScope}\n  ) {\n    id\n  }\n}",
		"createTime": "2023-05-19 05:51:41Z",
		"deleteTime": "",
		"enabled": true,
		"id": 1810062140702720,
		"illegal": false,
		"isPublic": true,
		"liveQuery": false,
		"method": "POST",
		"operationType": "mutations",
		"remark": "",
		"restUrl": "",
		"roleType": "",
		"roles": "",
		"title": "/Announcement/Send/CreateOneAnnouncement",
		"updateTime": "2023-06-01 08:10:19Z"
	},
	{
		"content": "mutation UpdateOneAnnouncement($id: String!, $updatedAt: DateTime! @injectCurrentDateTime(format: UnixDate), $title: String, $abstract: String, $content: String, $annoType: freetalk_AnnoType, $startTime: DateTime @injectCurrentDateTime(format: ISO8601), $isSend: Boolean, $annoScope: freetalk_AnnoScope = ALL) {\n  data: freetalk_updateOneAnnouncement(\n    data: {updatedAt: {set: $updatedAt}, title: {set: $title}, abstract: {set: $abstract}, content: {set: $content}, annoType: $annoType, startTime: {set: $startTime}, isSend: {set: $isSend}, annoScope: $annoScope}\n    where: {id: $id}\n  ) {\n    createdAt\n    updatedAt\n    deletedAt\n    title\n    abstract\n    content\n    annoType\n    startTime\n    isSend\n    userId\n    id\n    annoScope\n  }\n}",
		"createTime": "2023-05-19 05:51:41Z",
		"deleteTime": "",
		"enabled": true,
		"id": 1810062143127552,
		"illegal": false,
		"isPublic": true,
		"liveQuery": false,
		"method": "POST",
		"operationType": "mutations",
		"remark": "",
		"restUrl": "",
		"roleType": "",
		"roles": "",
		"title": "/Announcement/Send/UpdateOneAnnouncement",
		"updateTime": "2023-06-01 06:47:08Z"
	},
	{
		"content": "query GetAnnouncementList($take: Int = 10, $skip: Int = 0) {\n  data: freetalk_findManyAnnouncement(\n    skip: $skip\n    take: $take\n    orderBy: {createdAt: desc}\n  ) {\n    createdAt\n    updatedAt\n    deletedAt\n    title\n    abstract\n    content\n    annoType\n    startTime\n    isSend\n    userId\n    id\n    annoScope\n  }\n  total: freetalk_aggregateAnnouncement @transform(get: \"_count.id\") {\n    _count {\n      id\n    }\n  }\n}",
		"createTime": "2023-05-19 05:51:41Z",
		"deleteTime": "",
		"enabled": true,
		"id": 1810062144176128,
		"illegal": false,
		"isPublic": true,
		"liveQuery": false,
		"method": "GET",
		"operationType": "queries",
		"remark": "",
		"restUrl": "",
		"roleType": "",
		"roles": "",
		"title": "/Announcement/Send/GetAnnouncementList",
		"updateTime": "2023-06-01 06:46:31Z"
	},
	{
		"content": "query GetOneAnnouncement($id: String!) {\n  data: freetalk_findFirstAnnouncement(where: {id: {equals: $id}}) {\n    createdAt\n    updatedAt\n    deletedAt\n    title\n    abstract\n    content\n    annoType\n    startTime\n    isSend\n    userId\n    id\n    annoScope\n  }\n}",
		"createTime": "2023-05-19 05:51:41Z",
		"deleteTime": "",
		"enabled": true,
		"id": 1810062145093632,
		"illegal": false,
		"isPublic": true,
		"liveQuery": false,
		"method": "GET",
		"operationType": "queries",
		"remark": "",
		"restUrl": "",
		"roleType": "",
		"roles": "",
		"title": "/Announcement/Send/GetOneAnnouncement",
		"updateTime": "2023-06-01 06:46:49Z"
	},
	{
		"content": "mutation DeleteManyAnnouncement($ids: [String]!) {\n  data: freetalk_deleteManyAnnouncement(where: {id: {in: $ids}}) {\n    count\n  }\n}",
		"createTime": "2023-05-19 05:51:41Z",
		"deleteTime": "",
		"enabled": true,
		"id": 1810062146011136,
		"illegal": false,
		"isPublic": true,
		"liveQuery": false,
		"method": "POST",
		"operationType": "mutations",
		"remark": "",
		"restUrl": "",
		"roleType": "",
		"roles": "",
		"title": "/Announcement/Send/DeleteManyAnnouncement",
		"updateTime": "2023-05-19 07:50:23Z"
	},
	{
		"content": "query GetManyAnnouncementByScope($annoScope: freetalk_AnnoScope!) {\n  data: freetalk_findManyAnnouncement(\n    orderBy: {createdAt: desc}\n    where: {annoScope: {equals: $annoScope}}\n  ) {\n    createdAt\n    updatedAt\n    deletedAt\n    title\n    abstract\n    content\n    annoType\n    startTime\n    isSend\n    userId\n    id\n    annoScope\n  }\n}",
		"createTime": "2023-05-19 05:51:41Z",
		"deleteTime": "",
		"enabled": true,
		"id": 1810062146928640,
		"illegal": false,
		"isPublic": true,
		"liveQuery": false,
		"method": "GET",
		"operationType": "queries",
		"remark": "",
		"restUrl": "",
		"roleType": "",
		"roles": "",
		"title": "/Announcement/Send/GetManyAnnouncementByScope",
		"updateTime": "2023-06-01 08:11:34Z"
	},
	{
		"content": "mutation CreateOneAnnouncementRecv($annoId: String!, $userId: String!, $updatedAt: DateTime! @injectCurrentDateTime(format: ISO8601)) {\n  data: freetalk_createOneAnnouncementRecv(\n    data: {Announcement: {connect: {id: $annoId}}, User: {connect: {id: $userId}}, updatedAt: $updatedAt}\n  ) {\n    id\n  }\n}",
		"createTime": "2023-05-19 06:35:41Z",
		"deleteTime": "",
		"enabled": true,
		"id": 1810235191984128,
		"illegal": false,
		"isPublic": true,
		"liveQuery": false,
		"method": "POST",
		"operationType": "mutations",
		"remark": "",
		"restUrl": "",
		"roleType": "",
		"roles": "",
		"title": "/Announcement/Receive/CreateOneAnnouncementRecv",
		"updateTime": "2023-05-19 07:48:36Z"
	},
	{
		"content": "mutation DeleteOneAnnouncementRecv($id: String!) {\n  data: freetalk_deleteOneAnnouncementRecv(where: {id: $id}) {\n    id\n  }\n}",
		"createTime": "2023-05-19 06:35:41Z",
		"deleteTime": "",
		"enabled": true,
		"id": 1810235194146816,
		"illegal": false,
		"isPublic": true,
		"liveQuery": false,
		"method": "POST",
		"operationType": "mutations",
		"remark": "",
		"restUrl": "",
		"roleType": "",
		"roles": "",
		"title": "/Announcement/Receive/DeleteOneAnnouncementRecv",
		"updateTime": "2023-05-19 07:44:17Z"
	},
	{
		"content": "query GetAnnouncementRecvList($take: Int = 10, $skip: Int = 0, $startTime: DateTime! @injectCurrentDateTime(format: ISO8601), $userId: String! @fromClaim(name: USERID)) {\n  data: freetalk_findManyAnnouncementRecv(\n    skip: $skip\n    take: $take\n    orderBy: {createdAt: desc}\n    where: {Announcement: {is: {startTime: {lte: $startTime}, isSend: {equals: true}}}, User: {is: {id: {equals: $userId}}}}\n  ) {\n    id\n    createdAt\n    updatedAt\n    deletedAt\n    isRead\n    userId\n    annoId\n    Announcement {\n      abstract\n      annoType\n      createdAt\n      id\n      title\n      startTime\n      annoScope\n      content\n      nickname: User @transform(get: \"nickname\") {\n        nickname\n      }\n    }\n  }\n  total: freetalk_aggregateAnnouncementRecv @transform(get: \"_count.id\") {\n    _count {\n      id\n    }\n  }\n}",
		"createTime": "2023-05-19 06:35:41Z",
		"deleteTime": "",
		"enabled": true,
		"id": 1810235197030400,
		"illegal": false,
		"isPublic": true,
		"liveQuery": false,
		"method": "GET",
		"operationType": "queries",
		"remark": "",
		"restUrl": "",
		"roleType": "",
		"roles": "",
		"title": "/Announcement/Receive/GetAnnouncementRecvList",
		"updateTime": "2023-06-01 06:48:50Z"
	},
	{
		"content": "query GetOneAnnouncementRecv($id: String!) {\n  data: freetalk_findFirstAnnouncementRecv(where: {id: {equals: $id}}) {\n    id\n    createdAt\n    updatedAt\n    deletedAt\n    isRead\n    userId\n    annoId\n    Announcement {\n      abstract\n      annoType\n      content\n      createdAt\n      deletedAt\n      id\n      isSend\n      startTime\n      title\n      updatedAt\n      userId\n      annoScope\n    }\n  }\n}",
		"createTime": "2023-05-19 06:35:41Z",
		"deleteTime": "",
		"enabled": true,
		"id": 1810235198210048,
		"illegal": false,
		"isPublic": true,
		"liveQuery": false,
		"method": "GET",
		"operationType": "queries",
		"remark": "",
		"restUrl": "",
		"roleType": "",
		"roles": "",
		"title": "/Announcement/Receive/GetOneAnnouncementRecv",
		"updateTime": "2023-06-01 06:49:27Z"
	},
	{
		"content": "query GetUnReadAnnoRecvCount($startTime: DateTime! @injectCurrentDateTime(format: ISO8601), $userId: String! @fromClaim(name: USERID)) {\n  data: freetalk_aggregateAnnouncementRecv(\n    where: {isRead: {equals: false}, Announcement: {is: {startTime: {lte: $startTime}, isSend: {equals: true}}}, User: {is: {id: {equals: $userId}}}}\n  ) {\n    count: _count @transform(get: \"id\") {\n      id\n    }\n  }\n}",
		"createTime": "2023-05-19 07:33:47Z",
		"deleteTime": "",
		"enabled": true,
		"id": 1810463640256512,
		"illegal": false,
		"isPublic": true,
		"liveQuery": false,
		"method": "GET",
		"operationType": "queries",
		"remark": "",
		"restUrl": "",
		"roleType": "",
		"roles": "",
		"title": "/Announcement/Receive/GetUnReadAnnoRecvCount",
		"updateTime": "2023-05-19 07:48:01Z"
	},
	{
		"content": "mutation ReadAnnouncementRecv($id: String!) {\n  data: freetalk_updateOneAnnouncementRecv(\n    data: {isRead: {set: true}}\n    where: {id: $id}\n  ) {\n    id\n  }\n} ",
		"createTime": "2023-05-19 07:44:53Z",
		"deleteTime": "",
		"enabled": true,
		"id": 1810507310825472,
		"illegal": false,
		"isPublic": true,
		"liveQuery": false,
		"method": "POST",
		"operationType": "mutations",
		"remark": "",
		"restUrl": "",
		"roleType": "",
		"roles": "",
		"title": "/Announcement/Receive/ReadAnnouncementRecv",
		"updateTime": "2023-06-01 06:50:56Z"
	},
	{
		"content": "mutation MyQuery($id: String! @fromClaim(name: USERID), $age: String, $avatar: String, $difficulty: String, $enabled: Boolean, $learningPurpose: String, $nativeLanguage: String, $nickname: String, $phone: String, $profession: String, $speedOfSpeech: String, $updatedAt: DateTime @injectCurrentDateTime(format: ISO8601)) {\n  freetalk_updateOneUser(\n    data: {age: {set: $age}, avatar: {set: $avatar}, difficulty: {set: $difficulty}, enabled: {set: $enabled}, learningPurpose: {set: $learningPurpose}, nativeLanguage: {set: $nativeLanguage}, nickname: {set: $nickname}, phone: {set: $phone}, profession: {set: $profession}, speedOfSpeech: {set: $speedOfSpeech}, updatedAt: {set: $updatedAt}}\n    where: {id: $id}\n  ) {\n    id\n  }\n} ",
		"createTime": "2023-05-22 10:17:54Z",
		"deleteTime": "",
		"enabled": true,
		"id": 1828095905890304,
		"illegal": false,
		"isPublic": true,
		"liveQuery": false,
		"method": "POST",
		"operationType": "mutations",
		"remark": "",
		"restUrl": "",
		"roleType": "",
		"roles": "",
		"title": "/User/UpdateOneUser",
		"updateTime": "2023-05-22 10:25:14Z"
	},
	{
		"content": "query GetEffectiveAccounts($startTime: DateTime!, $endTime: DateTime!) {\n  data: freetalk_findManyAccount(\n    where: {membershipEndTime: {gte: $startTime, lte: $endTime}}\n  ) {\n    deletedAt\n    createdAt\n    costDuration\n    id\n    leftDuration\n    membershipEndTime\n    membershipId\n    updatedAt\n    userId: User @transform(get: \"id\") {\n      id\n    }\n  }\n} ",
		"createTime": "2023-05-23 06:45:07Z",
		"deleteTime": "",
		"enabled": true,
		"id": 1832921532661760,
		"illegal": false,
		"isPublic": true,
		"liveQuery": false,
		"method": "GET",
		"operationType": "queries",
		"remark": "",
		"restUrl": "",
		"roleType": "",
		"roles": "",
		"title": "/Account/GetEffectiveAccounts",
		"updateTime": "2023-06-08 09:10:50Z"
	},
	{
		"content": "query GetOneDictItem($title: String!, $code: String!) {\n  data: freetalk_findFirstDictItem(\n    where: {title: {equals: $title}, enabled: {equals: true}, Dict: {is: {code: {equals: $code}}}}\n  ) {\n    value\n    title\n    id\n    description\n  }\n}",
		"createTime": "2023-05-25 08:25:12Z",
		"deleteTime": "",
		"enabled": true,
		"id": 1844639675711488,
		"illegal": false,
		"isPublic": true,
		"liveQuery": false,
		"method": "GET",
		"operationType": "queries",
		"remark": "",
		"restUrl": "",
		"roleType": "",
		"roles": "",
		"title": "/Dict/GetOneDictItem",
		"updateTime": "2023-05-25 08:27:03Z"
	},
	{
		"content": "query MyQuery($url: String!) {\n  data: OCR_identify(url: $url)\n}",
		"createTime": "2023-05-31 03:03:53Z",
		"deleteTime": "",
		"enabled": true,
		"id": 1877350062227456,
		"illegal": false,
		"isPublic": true,
		"liveQuery": false,
		"method": "GET",
		"operationType": "queries",
		"remark": "",
		"restUrl": "",
		"roleType": "",
		"roles": "",
		"title": "/OCR/IdentifyPhoto",
		"updateTime": "2023-05-31 03:04:30Z"
	},
	{
		"content": "mutation SetChatErrorRecovery($id: String!, $errorRecovery: String!, $updatedAt: DateTime! @injectCurrentDateTime(format: ISO8601)) {\n  data: freetalk_updateOneChatMessage(\n    data: {errorRecovery: {set: $errorRecovery}, updatedAt: {set: $updatedAt}}\n    where: {id: $id}\n  ) {\n    id\n  }\n} ",
		"createTime": "2023-05-31 09:48:11Z",
		"deleteTime": "",
		"enabled": true,
		"id": 1878939883012096,
		"illegal": false,
		"isPublic": true,
		"liveQuery": false,
		"method": "POST",
		"operationType": "mutations",
		"remark": "",
		"restUrl": "",
		"roleType": "",
		"roles": "",
		"title": "/Chat/Message/SetChatErrorRecovery",
		"updateTime": "2023-05-31 09:52:18Z"
	},
	{
		"content": "query GetManyAnnoConfByType($annoType: freetalk_AnnoType!) {\n  data: freetalk_findManyAnnouncementConf(where: {annoType: {equals: $annoType}}) {\n    userId\n    title\n    startTime\n    content\n    annoType\n    annoScope\n    abstract\n  }\n} ",
		"createTime": "2023-06-01 07:01:41Z",
		"deleteTime": "",
		"enabled": true,
		"id": 1883947434049536,
		"illegal": false,
		"isPublic": true,
		"liveQuery": false,
		"method": "GET",
		"operationType": "queries",
		"remark": "",
		"restUrl": "",
		"roleType": "",
		"roles": "",
		"title": "/Announcement/Conf/GetManyAnnoConfByType",
		"updateTime": "2023-06-01 07:48:35Z"
	},
	{
		"content": "mutation PayNotify($data: String!) {\n  payment_payNotify(\n    payType: \"wxPay\",\n    data: $data\n  )\n}",
		"createTime": "2023-06-06 05:43:12Z",
		"deleteTime": "",
		"enabled": true,
		"id": 1911950391705600,
		"illegal": false,
		"isPublic": true,
		"liveQuery": false,
		"method": "POST",
		"operationType": "mutations",
		"remark": "",
		"restUrl": "",
		"roleType": "",
		"roles": "",
		"title": "/Payment/PayNotify_wxPay",
		"updateTime": "2023-06-06 05:43:50Z"
	},
	{
		"content": "query GetOutTimeDuration($chatId: String!) {\n  data: freetalk_aggregateChatMessage(\n    where: {chatId: {equals: $chatId}, AND: {createdAt: {}}}\n  ) {\n    outTimeDuration: _sum @transform(get: \"outTimeDuration\") {\n      outTimeDuration\n    }\n  }\n}",
		"createTime": "2023-06-07 01:56:30Z",
		"deleteTime": "",
		"enabled": true,
		"id": 1916721283334144,
		"illegal": false,
		"isPublic": true,
		"liveQuery": false,
		"method": "GET",
		"operationType": "queries",
		"remark": "",
		"restUrl": "",
		"roleType": "",
		"roles": "",
		"title": "/Chat/Message/GetChatOutTimeDuration",
		"updateTime": "2023-06-09 06:04:16Z"
	},
	{
		"content": "query GetAccountLast($userId: String! @fromClaim(name: USERID)) {\n  data: freetalk_findFirstAccount(where: {User: {is: {id: {equals: $userId}}}}) {\n    updatedAt\n  }\n}",
		"createTime": "2023-06-07 09:15:25Z",
		"deleteTime": "",
		"enabled": true,
		"id": 1918447168847872,
		"illegal": false,
		"isPublic": true,
		"liveQuery": false,
		"method": "GET",
		"operationType": "queries",
		"remark": "",
		"restUrl": "",
		"roleType": "",
		"roles": "",
		"title": "/Account/GetAccountLastUpdate",
		"updateTime": "2023-06-07 09:23:35Z"
	},
	{
		"content": "query MyQuery($id: String!,  $categoryId:String! @internal) {\n  data: freetalk_findFirstScene(where: {id: {equals: $id}}) {\n    createdAt\n    id\n    name\n    updatedAt\n    sceneCategory: SceneCategory {\n      name\n      usage\n    }\n    categoryId @export(as: \"categoryId\")\n    prompts: _join @transform(get: \"freetalk_findManyPromptText\") {\n      freetalk_findManyPromptText(\n        where: {usage: {equals: SceneCategory}, usageId: {equals: $categoryId}}\n      ) {\n        content\n        name\n      }\n    }\n  }\n}",
		"createTime": "2023-06-09 08:41:01Z",
		"deleteTime": "",
		"enabled": true,
		"id": 1929636510826496,
		"illegal": false,
		"isPublic": true,
		"liveQuery": false,
		"method": "GET",
		"operationType": "queries",
		"remark": "",
		"restUrl": "",
		"roleType": "",
		"roles": "",
		"title": "/Scene/GetOneScene",
		"updateTime": "2023-06-12 01:10:58Z"
	},
	{
		"content": "mutation CreateOneUserScene($name: String!, $updatedAt: DateTime! @injectCurrentDateTime(format: ISO8601), $userId: String @fromClaim(name: USERID), $categoryId: String) {\n  data: freetalk_createOneScene(\n    data: {name: $name, updatedAt: $updatedAt, userId: $userId, SceneCategory: {connect: {id: $categoryId}}}\n  ) {\n    id\n  }\n}",
		"createTime": "2023-06-09 11:55:54Z",
		"deleteTime": "",
		"enabled": true,
		"id": 1930402852241408,
		"illegal": false,
		"isPublic": true,
		"liveQuery": false,
		"method": "POST",
		"operationType": "mutations",
		"remark": "",
		"restUrl": "",
		"roleType": "",
		"roles": "",
		"title": "/Scene/CreateOneUserScene",
		"updateTime": "2023-06-12 03:34:12Z"
	},
	{
		"content": "mutation DeleteUserScene($ids: [String]!, $userId: String! @fromClaim(name: USERID)) {\n  data: freetalk_deleteManyScene(\n    where: {id: {in: $ids}, userId: {equals: $userId}}\n  ) {\n    count\n  }\n}",
		"createTime": "2023-06-09 11:56:40Z",
		"deleteTime": "",
		"enabled": true,
		"id": 1930405852676096,
		"illegal": false,
		"isPublic": true,
		"liveQuery": false,
		"method": "POST",
		"operationType": "mutations",
		"remark": "",
		"restUrl": "",
		"roleType": "",
		"roles": "",
		"title": "/Scene/DeleteUserScene",
		"updateTime": "2023-06-09 11:56:52Z"
	},
	{
		"content": "query MyQuery($categoryIds: [String]!) {\n  data: freetalk_findManyScene(where: {SceneCategory: {is: {id: {in: $categoryIds}}}}) {\n    id\n    name\n  }\n}",
		"createTime": "2023-06-09 11:57:46Z",
		"deleteTime": "",
		"enabled": true,
		"id": 1930410197516288,
		"illegal": false,
		"isPublic": true,
		"liveQuery": false,
		"method": "GET",
		"operationType": "queries",
		"remark": "",
		"restUrl": "",
		"roleType": "",
		"roles": "",
		"title": "/Scene/GetScenesByIds",
		"updateTime": "2023-06-09 11:58:25Z"
	},
	{
		"content": "query MyQuery($categoryIds: [String]!) {\n  data: freetalk_findManyScene(\n    where: {SceneCategory: {is: {id: {in: $categoryIds}, usage: {equals: Required}}}}\n  ) {\n    id\n    name\n    suffixIcon\n    prefixIcon\n  }\n}",
		"createTime": "2023-06-09 11:59:42Z",
		"deleteTime": "",
		"enabled": true,
		"id": 1930417785470976,
		"illegal": false,
		"isPublic": true,
		"liveQuery": false,
		"method": "GET",
		"operationType": "queries",
		"remark": "",
		"restUrl": "",
		"roleType": "",
		"roles": "",
		"title": "/Scene/GetManySceneByIds",
		"updateTime": "2023-06-12 06:34:43Z"
	},
	{
		"content": "query GetSceneList($userId: String! @fromClaim(name: USERID)) {\n  data: freetalk_findManyScene(\n    where: {OR: [{userId: {equals: $userId}, SceneCategory: {is: {usage: {equals: User}}}}, {SceneCategory: {is: {usage: {in: [Random, System]}}}}]}\n    orderBy: {SceneCategory: {sort: asc}}\n  ) {\n    id\n    name\n    usage: SceneCategory @transform(get: \"usage\") {\n      usage\n    }\n    prefixIcon\n    suffixIcon\n  }\n}",
		"createTime": "2023-06-09 12:02:58Z",
		"deleteTime": "",
		"enabled": true,
		"id": 1930430665850880,
		"illegal": false,
		"isPublic": true,
		"liveQuery": false,
		"method": "GET",
		"operationType": "queries",
		"remark": "",
		"restUrl": "",
		"roleType": "",
		"roles": "",
		"title": "/Scene/GetSceneList",
		"updateTime": "2023-06-14 02:21:55Z"
	},
	{
		"content": "query MyQuery {\n  data: freetalk_findFirstSceneCategory(where: {usage: {equals: User}}) {\n    id\n  }\n}",
		"createTime": "2023-06-12 01:56:44Z",
		"deleteTime": "",
		"enabled": true,
		"id": 1945033772957696,
		"illegal": false,
		"isPublic": true,
		"liveQuery": false,
		"method": "GET",
		"operationType": "queries",
		"remark": "",
		"restUrl": "",
		"roleType": "",
		"roles": "",
		"title": "/Scene/FindFirstSceneCategory",
		"updateTime": "2023-06-12 01:57:54Z"
	},
	{
		"content": "query GetPaymentConf {\n  data: freetalk_findFirstPaymentConf {\n    createdAt\n    expireMin\n    cronIntervalSec\n    id\n    startQueryMin\n    updatedAt\n  }\n} ",
		"createTime": "2023-06-12 09:13:54Z",
		"deleteTime": "",
		"enabled": true,
		"id": 1946752784924672,
		"illegal": false,
		"isPublic": true,
		"liveQuery": false,
		"method": "GET",
		"operationType": "queries",
		"remark": "",
		"restUrl": "",
		"roleType": "",
		"roles": "",
		"title": "/Payment/GetPaymentConf",
		"updateTime": "2023-06-13 02:43:36Z"
	}
]